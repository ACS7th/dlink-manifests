apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentd-config
  namespace: dlk-monitoring
data:
  fluent.conf: |
    <system>
      log_level debug
    </system>

    # ----------------------------------------
    # ✅ [Kubernetes 로그 수집]
    # - /var/log/containers/*.log 로그 파일을 수집하여 파싱
    # - ISO8601 형식의 타임스탬프를 포함한 멀티라인 로그 지원
    # ----------------------------------------
    <source>
      @type tail
      path /var/log/containers/*.log
      pos_file /var/log/fluentd-containers.log.pos
      tag kubernetes.*
      read_from_head true
      rotate_wait 10s
      skip_refresh_on_startup true
      refresh_interval 60

      <parse>
        @type multiline
        format_firstline /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+(?:\+\d{2}(?::\d{2})?)?/
        format1 /^(?<time>[^\s]+)\s+(?<stream>\S+)\s+(?<log>.+)$/
      </parse>
    </source>

    # ----------------------------------------
    # ✅ [Kubernetes 메타데이터 추가]
    # - Fluentd에서 컨테이너 이름, 네임스페이스, 애플리케이션 이름을 추출
    # ----------------------------------------
    <filter kubernetes.**>
      @type kubernetes_metadata
      @id id_kubernetes_metadata
    </filter>

    <filter kubernetes.var.log.containers.**>
      @type record_transformer
      enable_ruby
      <record>
      # log ${record["log"] ? record["log"].gsub(/\\\\/, '').strip : "EMPTY_LOG"}
      # time ${record["time"]}
      #  stream ${record["stream"]}
      #  container_name ${record["source"] =~ /var\/log\/containers\/(?<container>[^_]+)_([^_]+)_(?<namespace>[^_]+)_([^.]+).log/ ? $~[:container] : "unknown"}
      #  namespace ${record["source"] =~ /var\/log\/containers\/(?<container>[^_]+)_([^_]+)_(?<namespace>[^_]+)_([^.]+).log/ ? $~[:namespace] : "unknown"}
      #  application ${record["source"] =~ /var\/log\/containers\/(?<container>[^_]+)_([^_]+)_(?<namespace>[^_]+)_(?<app>[^_]+)-[^.]+.log/ ? $~[:app] : "unknown"}
        kubernetes_labels_app ${record.dig("kubernetes", "labels", "app") ? record.dig("kubernetes", "labels", "app").to_s : ""}
        kubernetes_labels_app_name ${record.dig("kubernetes", "labels", "app.kubernetes.io/name") ? record.dig("kubernetes", "labels", "app.kubernetes.io/name").to_s : ""}
      </record>
    </filter>

    # ----------------------------------------
    # ✅ [Elasticsearch 전송]
    # - 수집된 로그를 Elasticsearch에 저장
    # - logstash 형식을 사용하여 인덱스 생성
    # ----------------------------------------
    <match kubernetes.**>
      @type elasticsearch
      host 192.168.3.82
      port 9200
      logstash_format true
      logstash_prefix fluentd
      logstash_dateformat %Y.%m.%d
      include_tag_key true
      tag_key @log_name
      <buffer>
        @type memory
        chunk_limit_size 2MB
        queue_limit_length 8
        flush_interval 10s
      </buffer>
    </match>

